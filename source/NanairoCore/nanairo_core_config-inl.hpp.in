/*!
  \file nanairo_core_config-inl.hpp
  \author Sho Ikeda

  Copyright (c) 2015-2018 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#ifndef NANAIRO_NANAIRO_CORE_CONFIG_INL_HPP
#define NANAIRO_NANAIRO_CORE_CONFIG_INL_HPP

#include "NanairoCore/nanairo_core_config.hpp"
// Standard C++ library
#include <cstddef>
#include <cstdint>
#include <string>
#include <type_traits>

namespace nanairo {

/*!
  */
inline
constexpr uint16 CoreConfig::blueWavelength() noexcept
{
  constexpr uint16 blue_wavelength = 440;
  return blue_wavelength;
}

/*!
  */
inline
constexpr uint16 CoreConfig::greenWavelength() noexcept
{
  constexpr uint16 green_wavelength = 540;
  return green_wavelength;
}

/*!
  */
inline
constexpr uint16 CoreConfig::redWavelength() noexcept
{
  constexpr uint16 red_wavelength = 700;
  return red_wavelength;
}

/*!
  */
inline
constexpr uint CoreConfig::imageHeightMin() noexcept
{
  constexpr uint image_height_min = 256;
  return image_height_min;
}

/*!
  */
inline
constexpr uint CoreConfig::imageWidthMin() noexcept
{
  constexpr uint image_width_min = 256;
  return image_width_min;
}

/*!
  */
inline
constexpr std::size_t CoreConfig::memoryPoolSize() noexcept
{
  constexpr std::size_t pool_size = @NANAIRO_MEMORY_POOL_SIZE@;
  return pool_size;
}

/*!
  */
inline
constexpr uint16 CoreConfig::shortestWavelength() noexcept
{
  constexpr uint16 shortest_wavelength = @NANAIRO_SHORTEST_WAVELENGTH@;
  static_assert(360 <= shortest_wavelength,
                "The shortest wavelength is less than 360nm.");
  return shortest_wavelength;
}

/*!
  */
inline
constexpr uint16 CoreConfig::longestWavelength() noexcept
{
  constexpr uint16 longest_wavelength = @NANAIRO_LONGEST_WAVELENGTH@;
  static_assert(longest_wavelength <= 830,
                "The longest wavelength is greater than 830nm.");
  return longest_wavelength;
}

/*!
  */
inline
constexpr uint CoreConfig::wavelengthRange() noexcept
{
  constexpr uint w_s = static_cast<uint>(shortestWavelength());
  constexpr uint w_l = static_cast<uint>(longestWavelength());
  static_assert(w_s < w_l, "The shortest wavelength is greater than the longest.");
  return w_l - w_s;
}

/*!
  */
inline
constexpr uint CoreConfig::wavelengthResolution() noexcept
{
  constexpr uint wavelength_resolution = @NANAIRO_WAVELENGTH_RESOLUTION@;
  static_assert(
      wavelengthRange() % wavelength_resolution == 0,
      "Invalid wavelength resolution is specified.");
  static_assert(
      (blueWavelength() - shortestWavelength()) % wavelength_resolution == 0,
      "Invalid wavelength resolution is specified.");
  static_assert(
      (greenWavelength() - shortestWavelength()) % wavelength_resolution == 0,
      "Invalid wavelength resolution is specified.");
  static_assert(
      (redWavelength() - shortestWavelength()) % wavelength_resolution == 0,
      "Invalid wavelength resolution is specified.");
  return wavelength_resolution;
}

/*!
  */
inline
constexpr uint CoreConfig::spectraSize() noexcept
{
  constexpr uint spectra_size = wavelengthRange() / wavelengthResolution() + 1;
  return spectra_size;
}

/*!
  */
inline
constexpr uint CoreConfig::sizeOfRenderingTileSide() noexcept
{
  constexpr uint tile_size = 4;
  return tile_size;
}

/*!
  */
inline
constexpr uint CoreConfig::maxNumOfNodeObjects() noexcept
{
  constexpr uint max_num_of_node_objects = @NANAIRO_MAX_NUM_OF_OBJECTS@;
  return max_num_of_node_objects;
}

/*!
  */
inline
constexpr uint CoreConfig::wavelengthSampleSize() noexcept
{
  constexpr uint wavelength_sample_size = @NANAIRO_WAVELENGTH_SAMPLE_SIZE@;
  return wavelength_sample_size;
}

/*!
  */
inline
constexpr uint CoreConfig::misHeuristicBeta() noexcept
{
  constexpr uint mis_heuristic_beta = @NANAIRO_MIS_HEURISTIC_BETA@;
  return mis_heuristic_beta;
}

/*!
  */
inline
constexpr bool CoreConfig::pathTracingExplicitConnectionIsEnabled() noexcept
{
  constexpr bool explicit_connection_is_enabled = @NANAIRO_PATH_TRACING_EXPLICIT_CONNECTION_IS_ENABLED@;
  return explicit_connection_is_enabled;
}

/*!
  */
inline
constexpr bool CoreConfig::pathTracingImplicitConnectionIsEnabled() noexcept
{
  constexpr bool implicit_connection_is_enabled = @NANAIRO_PATH_TRACING_IMPLICIT_CONNECTION_IS_ENABLED@;
  return implicit_connection_is_enabled;
}

/*!
  \return The version text of the application
  */
inline
std::string CoreConfig::versionString() noexcept
{
  return std::string{"@nanairo_version@"};
}

/*!
  \return The major number of the version
  */
inline
constexpr int CoreConfig::versionMajor() noexcept
{
  return @nanairo_version_major@;
}

/*!
  \return The minor number of the version
  */
inline
constexpr int CoreConfig::versionMinor() noexcept
{
  return @nanairo_version_minor@;
}

/*!
  \return The patch number of the version
  */
inline
constexpr int CoreConfig::versionPatch() noexcept
{
  return @nanairo_version_patch@;
}

} // namespace nanairo

#endif // NANAIRO_NANAIRO_CORE_CONFIG_INL_HPP
